// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package assembly

import (
	"github.com/go_example/internal/controller"
	"github.com/go_example/internal/repository/mysql"
	"github.com/go_example/internal/repository/redis"
	"github.com/go_example/internal/server"
	"github.com/go_example/internal/service"
)

// Injectors from controller.go:

func NewHelloController() (controller.HelloController, func(), error) {
	helloService, cleanup, err := NewHelloService()
	if err != nil {
		return nil, nil, err
	}
	helloController := controller.NewHelloController(helloService)
	return helloController, func() {
		cleanup()
	}, nil
}

func NewAuthController() (controller.AuthController, func(), error) {
	authService, cleanup, err := NewAuthService()
	if err != nil {
		return nil, nil, err
	}
	authController := controller.NewAuthController(authService)
	return authController, func() {
		cleanup()
	}, nil
}

func NewHomeController() (controller.HomeController, func(), error) {
	homeController := controller.NewHomeController()
	return homeController, func() {
	}, nil
}

// Injectors from server.go:

func NewHttpServer() (server.HttpServer, func(), error) {
	helloController, cleanup, err := NewHelloController()
	if err != nil {
		return nil, nil, err
	}
	authController, cleanup2, err := NewAuthController()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	homeController, cleanup3, err := NewHomeController()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	authService, cleanup4, err := NewAuthService()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer := server.NewHttpServer(helloController, authController, homeController, authService)
	return httpServer, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from service.go:

func NewHelloService() (service.HelloService, func(), error) {
	mysqlGroupClient, cleanup, err := NewMysqlGroupClient()
	if err != nil {
		return nil, nil, err
	}
	userRepository := mysql.NewUserRepository(mysqlGroupClient)
	redisGroupClient, cleanup2, err := NewRedisGroupClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisUserRepository := redis.NewUserRepository(redisGroupClient)
	helloService := service.NewHelloService(userRepository, redisUserRepository)
	return helloService, func() {
		cleanup2()
		cleanup()
	}, nil
}

func NewAuthService() (service.AuthService, func(), error) {
	mysqlGroupClient, cleanup, err := NewMysqlGroupClient()
	if err != nil {
		return nil, nil, err
	}
	userRepository := mysql.NewUserRepository(mysqlGroupClient)
	redisGroupClient, cleanup2, err := NewRedisGroupClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisUserRepository := redis.NewUserRepository(redisGroupClient)
	authService := service.NewAuthService(userRepository, redisUserRepository)
	return authService, func() {
		cleanup2()
		cleanup()
	}, nil
}

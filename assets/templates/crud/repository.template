package mysql

import (
	"github.com/gin-gonic/gin"
	"github.com/go_example/internal/meta"
	"github.com/go_example/internal/model"
	mysqlModel "github.com/go_example/internal/model/mysql"
	"go.uber.org/zap"
)

type {{CONTROLLER_NAME_UPPER}}Repository interface {
	InsertRow(ctx *gin.Context, data mysqlModel.{{CONTROLLER_NAME_UPPER}}List) (int64, error)
	UpdateById(ctx *gin.Context, data mysqlModel.{{CONTROLLER_NAME_UPPER}}List) (int64, error)
	DeleteById(ctx *gin.Context, id int) (int64, error)
	FindAll(ctx *gin.Context, params model.{{CONTROLLER_NAME_UPPER}}SelectForm) ([]mysqlModel.{{CONTROLLER_NAME_UPPER}}List, error)
}

type {{CONTROLLER_NAME_LITTER}}Repository struct {
	engine meta.MysqlSingleClient
	table  string
}

func New{{CONTROLLER_NAME_UPPER}}Repository(engine meta.MysqlSingleClient) {{CONTROLLER_NAME_UPPER}}Repository {
	return &{{CONTROLLER_NAME_LITTER}}Repository{
		engine: engine,
		table:  "{{TABLE_NAME}}",
	}
}

func (repo *{{CONTROLLER_NAME_LITTER}}Repository) InsertRow(ctx *gin.Context, data mysqlModel.{{CONTROLLER_NAME_UPPER}}List) (int64, error) {
	rows, err := repo.engine.Table(repo.table).Insert(&data)
	if err != nil {
		zap.L().Error("{{CONTROLLER_NAME_LITTER}}Repository.CreateItem err", zap.Error(err))
	}
	return rows, err
}

// todo 需要修改字段
func (repo *{{CONTROLLER_NAME_LITTER}}Repository) UpdateById(ctx *gin.Context, data mysqlModel.{{CONTROLLER_NAME_UPPER}}List) (int64, error) {
	rows, err := repo.engine.Table(repo.table).Cols("name", "age", "updated_at").Where("id=?", data.Id).Update(&data)
	if err != nil {
		zap.L().Error("{{CONTROLLER_NAME_LITTER}}Repository.UpdateById err", zap.Error(err))
	}
	return rows, err
}

func (repo *{{CONTROLLER_NAME_LITTER}}Repository) DeleteById(ctx *gin.Context, id int) (int64, error) {
	var {{CONTROLLER_NAME_LITTER}}Data mysqlModel.{{CONTROLLER_NAME_UPPER}}List
	rows, err := repo.engine.Table(repo.table).Where("id=?", id).Delete(&{{CONTROLLER_NAME_LITTER}}Data)
	if err != nil {
		zap.L().Error("{{CONTROLLER_NAME_LITTER}}Repository.DeleteById err", zap.Error(err))
	}
	return rows, err
}

func (repo *{{CONTROLLER_NAME_LITTER}}Repository) FindAll(ctx *gin.Context, params model.{{CONTROLLER_NAME_UPPER}}SelectForm) ([]mysqlModel.{{CONTROLLER_NAME_UPPER}}List, error) {
	dataList := make([]mysqlModel.{{CONTROLLER_NAME_UPPER}}List, 0, 100)
	engine := repo.engine.Table(repo.table)
	if params.Name != "" {
		engine.Where("name LIKE ?", "%"+params.Name+"%")
	}
	err := engine.Find(&dataList)
	return dataList, err
}

